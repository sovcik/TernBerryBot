define LAYER     0

define MOTOR_BC  6

define BRAKE_STOP  1
define BRAKE_COAST 0

define  MOTOR_LEFT   MOTOR_B
define  MOTOR_RIGHT  MOTOR_C 
define  MOTOR_BOTH   MOTOR_BC
define  MOTOR_SPEED  30
define  MOTOR_NEGATIVE_SPEED -30
define  MOTOR_STEP	1000

vmthread main {
  DATA32 count0
  MOVE32_32(0, count0)
  loop0:
    CALL(Right)
    CALL(Forward)
    DATA32 count1
    MOVE32_32(0, count1)
    loop1:
      Shake();
      ADD32(1, count1,count1)
      JR_LTE32(count1,4,loop1)
    ADD32(1, count0,count0)
    JR_LTE32(count0,4,loop0)
  // END
}

//-----------------------------------
subcall Forward {
   OUTPUT_TIME_SPEED(LAYER, MOTOR_BOTH, MOTOR_SPEED, 500, MOTOR_STEP, 500, BRAKE_STOP )
   CALL (wait_for_motors)
}

//-----------------------------------
subcall Backward {
   OUTPUT_TIME_SPEED(LAYER, MOTOR_BOTH, MOTOR_NEGATIVE_SPEED, 500, MOTOR_STEP, 500, BRAKE_STOP )
   CALL (wait_for_motors)
}
//-----------------------------------
subcall Left {
   OUTPUT_STEP_SPEED(LAYER, MOTOR_RIGHT, 25, 20, 140, 20, BRAKE_STOP)
   OUTPUT_STEP_SPEED(LAYER, MOTOR_LEFT, -25, 20, 140, 20, BRAKE_STOP)
   CALL (wait_for_motors)
}
//-----------------------------------
subcall Right {
   OUTPUT_STEP_SPEED(LAYER, MOTOR_RIGHT, -25, 20, 140, 20, BRAKE_STOP)
   OUTPUT_STEP_SPEED(LAYER, MOTOR_LEFT,   25, 20, 140, 20, BRAKE_STOP)
   CALL (wait_for_motors)
}
//-----------------------------------
subcall beep {
   SOUND(TONE,50,262,500)
   SOUND_READY
}
//-----------------------------------
subcall wait_for_motors {
   DATA32 timer
   DATA8	 yn
   motor_running:
   TIMER_WAIT(100,timer)
   TIMER_READY(timer)
   OUTPUT_TEST(LAYER, MOTOR_BOTH, yn)
   JR_TRUE(yn, motor_running)
}
